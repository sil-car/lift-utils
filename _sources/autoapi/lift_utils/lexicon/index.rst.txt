:py:mod:`lift_utils.lexicon`
============================

.. py:module:: lift_utils.lexicon

.. autoapi-nested-parse::

   Manipulate lexicon entries and their dependent elements.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   lift_utils.lexicon.Entry
   lift_utils.lexicon.Etymology
   lift_utils.lexicon.Example
   lift_utils.lexicon.GrammaticalInfo
   lift_utils.lexicon.Lexicon
   lift_utils.lexicon.Note
   lift_utils.lexicon.Phonetic
   lift_utils.lexicon.Relation
   lift_utils.lexicon.Reversal
   lift_utils.lexicon.Sense
   lift_utils.lexicon.Translation
   lift_utils.lexicon.Variant




.. py:class:: Entry(xml_tree: Optional[lxml.etree._Element] = None)


   Bases: :py:obj:`lift_utils.base.Extensible`

   This is the core of a lexicon. A lexicon is made up of a set of entries.

   :ivar Optional[RefId] id: This gives a unique identifier to this ``entry``.
   :ivar Optional[str] guid: `Deprecated.` This gives a unique identifier to
       this entry in the form of a “universally unique identifier” (RFC 4122).
   :ivar Optional[int] order: This is the homograph number.
   :ivar Optional[DateTime] date_deleted: If this attribute exists then it
       indicates that the particular ``entry`` has been deleted.
   :ivar Optional[Multitext] lexical_unit: The lexical form is the primary
       lexical form as is found as the primary lexical form in the source data
       models for this standard.
   :ivar Optional[Multitext] citation: This is the form that is to be printed
       in the dictionary.
   :ivar Optional[List[Phonetic]] pronunciation_items: There can be multiple
       phonetic forms of an entry.
   :ivar Optional[List[Variant]] variant_items: Any constrained variants or
       free orthographic variants.
   :ivar Optional[List[Sense]] sense_items: This is where the definition goes.
   :ivar Optional[List[Note]] note_items: The more notes you keep the better.
   :ivar Optional[List[Relation]] relation_items: Gives a lexical relationship
       between this entry and another ``entry`` or ``sense``.
   :ivar Optional[List[Etymology]] etymology_items: Differs from a lexical
       relation in that it has no referent in the lexicon.

   .. py:method:: get_gloss(sense_idx=0, lang='en') -> str

      Get gloss details for a given sense index and language.
      Defaults to index 0 and English.


   .. py:method:: get_grammatical_info(sense_idx=0) -> GrammaticalInfo

      Get basic grammatical info for a given sense index [default=0].
              


   .. py:method:: get_id() -> lift_utils.datatypes.RefId

      Return the object's unique identifier


   .. py:method:: show()

      Print an overview of the ``entry`` in the terminal window.



.. py:class:: Etymology(etym_type: lift_utils.datatypes.Key = None, source: str = None, xml_tree: Optional[lxml.etree._Element] = None)


   Bases: :py:obj:`lift_utils.base.Extensible`

   For describing lexical relations with a word not in the lexicon.

   :ivar Key type: Gives the etymological relationship between this sense and
       some other word in another language.
   :ivar str source: Gives the language for the source language of the
       etymological relation.
   :ivar Optional[List[Gloss]] gloss_items: Gives glosses of the word that the
       etymological relationship is with.
   :ivar Optional[Form] form: Holds the form of the etymological reference.


.. py:class:: Example(xml_tree: Optional[lxml.etree._Element] = None)


   Bases: :py:obj:`lift_utils.base.Multitext`, :py:obj:`lift_utils.base.Extensible`

   Gives an example sentence or phrase.
   It is given in the language and glosses of that example in other languages.

   :ivar Optional[Key] source: Reference by which another application may
       refer to this example or is a reference into another database of texts,
       for example.
   :ivar Optional[List[Translation]] translation_items: Gives translations of
       the example into different languages.
   :ivar Optional[List[Note]] note_items: Holds notes on this example.


.. py:class:: GrammaticalInfo(value: lift_utils.datatypes.Key = None, xml_tree: Optional[lxml.etree._Element] = None)


   Bases: :py:obj:`lift_utils.base.LIFTUtilsBase`

   A reference to a ``range-element`` in the ``grammatical-info`` range.

   :ivar Key value: The part of speech tag into the ``grammatical-info``
       range.
   :ivar Optional[List[Trait]] trait_items: Allows the grammatical information
       for a given sense to have more information than just the part of speech
       given by the ``value`` attribute.


.. py:class:: Lexicon(path: Optional[Union[pathlib.Path, str]] = None, version: str = None, xml_tree: Optional[lxml.etree._Element] = None)


   Bases: :py:obj:`lift_utils.base.LIFTUtilsBase`

   This is the main class of the lexicon.
   It contains the header and all the entries in the database.

   :ivar str version: Specifies the lift language version number.
   :ivar Optional[str] producer: Identifies the particular producer of this
       lift file.
   :ivar Optional[Header] header: Contains the header information for the
       database.
   :ivar Optional[List[Entry]] entry_items: Each of the entries in the
       lexicon.
   :ivar Optional[Path] path: File path to a LIFT file to import.

   .. py:method:: find(text: str, field: str = 'gloss') -> Union[Entry, Sense, None]

      Return the first matching ``Entry`` or ``Sense`` item.
      The field searched can be "lexical-unit", "variant", "gloss", or
      "definition", as well as any fields defined in the LIFT file's header.


   .. py:method:: find_all(text: str, field: str = 'gloss') -> List[Union[Entry, Sense]]

      Return all matching ``Entry`` or ``Sense`` items.
      The field searched can be "lexical-unit", "variant", "gloss",
      "definition", or "grammatical-info", as well as any fields defined in
      the LIFT file's header.


   .. py:method:: get_item_by_id(refid: str) -> Union[Entry, Sense, None]

      Return an entry or sense by its ``RefId``.


   .. py:method:: show()

      Print an overview of the ``Lexicon`` in the terminal window.


   .. py:method:: to_lift(file_path: str)

      Save the ``Lexicon`` as a LIFT file.
      The LIFT-RANGES file will be automatically created in the same folder
      as the LIFT file.



.. py:class:: Note(xml_tree: Optional[lxml.etree._Element] = None)


   Bases: :py:obj:`lift_utils.base.Multitext`, :py:obj:`lift_utils.base.Extensible`

   For storing descriptive information of many kinds.
   It can include comments, bibliographic information and domain specific
   notes.

   :ivar Optional[Key] type: Gives the type of note by reference to a
       ``range-element`` in the ``note-type`` range.


.. py:class:: Phonetic(xml_tree: Optional[lxml.etree._Element] = None)


   Bases: :py:obj:`lift_utils.base.Multitext`, :py:obj:`lift_utils.base.Extensible`

   This represents a single pronunciation in phonetic form.

   :ivar Optional[List[URLRef]] media_items: Stores an audio representation of
       the text.
   :ivar Optional[List[Span]] form_items: `Used by LIFT v0.13 (FieldWorks).`
       Stores the phonetic representation using whichever writing system: IPA,
       Americanist, etc.


.. py:class:: Relation(rel_type: lift_utils.datatypes.Key = None, ref: lift_utils.datatypes.RefId = None, xml_tree: Optional[lxml.etree._Element] = None)


   Bases: :py:obj:`lift_utils.base.Extensible`

   This element is used for lexical relations.

   :ivar Key type: Is the type of the particular lexical relation.
   :ivar RefId ref: This is the other end of the relation, either a ``sense``
       or an ``entry``.
   :ivar Optional[int] order: Gives the relative ordering of relations of a
       given type when a multiple relation is being described.
   :ivar Optional[Multitext] usage: Gives information on usage in one or more
       languages or writing systems.


.. py:class:: Reversal(xml_tree: Optional[lxml.etree._Element] = None)


   Bases: :py:obj:`lift_utils.base.Multitext`

   Enables a wider use of a dictionary.

   :ivar Optional[Key] type: Gives the type of the reversal as a
       ``range-element`` in the ``reversal-type`` range.
   :ivar Optional[Reversal] main: This gives the parent reversal in a
       hierarchical set of reversals.
   :ivar Optional[GrammaticalInfo] grammatical_info: This allows a reversal
       relation to specify what the grammatical information is in the reversal
       language.


.. py:class:: Sense(xml_tree: Optional[lxml.etree._Element] = None)


   Bases: :py:obj:`lift_utils.base.Extensible`

   An ``entry`` is made up of a number of ``sense`` elements.

   :ivar Optional[RefId] id: This gives an identifier for this ``Sense`` so
       that things can refer to it.
   :ivar Optional[int] order: A number that is used to give the relative
       order of senses within an entry.
   :ivar Optional[GrammaticalInfo] grammatical_info: Grammatical information.
   :ivar Optional[List[Union[Gloss, Form]]] gloss_items: Each ``gloss`` is a
       single string in a single language and writing system. ``Form`` is used
       by LIFT v0.13 (FieldWorks), while ``Gloss`` is used in later versions.
   :ivar Optional[Multitext] definition: Gives the definition in multiple
       languages or writing systems.
   :ivar Optional[List[Relation]] relation_items: While a lexical relation
       isn't strictly owned by a sense it is a good place to hold it.
   :ivar Optional[List[Note]] note_items: There are lots of different types of
       notes.
   :ivar Optional[List[Example]] example_items: Examples may be used for
       different target audiences.
   :ivar Optional[List[Reversal]] reversal_items: There may be different
       reversal indexes.
   :ivar Optional[List[URLRef]] illustration_items: The picture doesn't have
       to be static.
   :ivar Optional[List[Sense]] subsense_items: Senses can form a hierarchy.

   .. py:method:: get_gloss(lang='en') -> str

      Get gloss details for a given language.
      Defaults to English.


   .. py:method:: get_grammatical_info() -> GrammaticalInfo

      Get basic grammatical info.
              


   .. py:method:: get_id() -> lift_utils.datatypes.RefId

      Return the object's unique identifier


   .. py:method:: show()

      Print an overview of the ``sense`` in the terminal window.



.. py:class:: Translation(xml_tree: Optional[lxml.etree._Element] = None)


   Bases: :py:obj:`lift_utils.base.Multitext`

   A ``Multitext`` with an optional translation ``type`` attribute.

   :ivar Optional[Key] type: Gives the type of the translation.


.. py:class:: Variant(xml_tree: Optional[lxml.etree._Element] = None)


   Bases: :py:obj:`lift_utils.base.Multitext`, :py:obj:`lift_utils.base.Extensible`

   ``variant`` elements are used for all sorts of variation.

   :ivar Optional[RefId] ref: Gives the variation as a reference to another
       ``entry`` or ``sense`` rather than specifying the ``form`` (that is,
       the ``Multitext`` value of the variant).
   :ivar Optional[List[Phonetic]] pronunciation_items: Holds the phonetic
       variant whether it is that this is a variation in phonetics only or
       that the phonetic variation arises because of an orthographic or
       phonemic variation.
   :ivar Optional[List[Relation]] relation_items: Some variants have a lexical
       relationship with other senses or entries in the lexicon.


