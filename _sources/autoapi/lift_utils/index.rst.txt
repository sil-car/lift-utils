:py:mod:`lift_utils`
====================

.. py:module:: lift_utils

.. autoapi-nested-parse::

   Manipulate LIFT files and data



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base/index.rst
   config/index.rst
   datatypes/index.rst
   header/index.rst
   lexicon/index.rst
   utils/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   lift_utils.Entry
   lift_utils.Lexicon
   lift_utils.Sense




.. py:class:: Entry(xml_tree: Optional[lxml.etree._Element] = None)


   Bases: :py:obj:`lift_utils.base.Extensible`

   This is the core of a lexicon. A lexicon is made up of a set of entries.

   :ivar Optional[RefId] id: This gives a unique identifier to this ``entry``.
   :ivar Optional[str] guid: `Deprecated.` This gives a unique identifier to
       this entry in the form of a “universally unique identifier” (RFC 4122).
   :ivar Optional[int] order: This is the homograph number.
   :ivar Optional[DateTime] date_deleted: If this attribute exists then it
       indicates that the particular ``entry`` has been deleted.
   :ivar Optional[Multitext] lexical_unit: The lexical form is the primary
       lexical form as is found as the primary lexical form in the source data
       models for this standard.
   :ivar Optional[Multitext] citation: This is the form that is to be printed
       in the dictionary.
   :ivar Optional[List[Phonetic]] pronunciation_items: There can be multiple
       phonetic forms of an entry.
   :ivar Optional[List[Variant]] variant_items: Any constrained variants or
       free orthographic variants.
   :ivar Optional[List[Sense]] sense_items: This is where the definition goes.
   :ivar Optional[List[Note]] note_items: The more notes you keep the better.
   :ivar Optional[List[Relation]] relation_items: Gives a lexical relationship
       between this entry and another ``entry`` or ``sense``.
   :ivar Optional[List[Etymology]] etymology_items: Differs from a lexical
       relation in that it has no referent in the lexicon.

   .. py:method:: get_gloss(sense_idx=0, lang='en') -> str

      Get gloss details for a given sense index and language.
      Defaults to index 0 and English.


   .. py:method:: get_grammatical_info(sense_idx=0) -> GrammaticalInfo

      Get basic grammatical info for a given sense index [default=0].
              


   .. py:method:: get_id() -> lift_utils.datatypes.RefId

      Return the object's unique identifier


   .. py:method:: show()

      Print an overview of the ``entry`` in the terminal window.



.. py:class:: Lexicon(path: Optional[Union[pathlib.Path, str]] = None, version: str = None, xml_tree: Optional[lxml.etree._Element] = None)


   Bases: :py:obj:`lift_utils.base.LIFTUtilsBase`

   This is the main class of the lexicon.
   It contains the header and all the entries in the database.

   :ivar str version: Specifies the lift language version number.
   :ivar Optional[str] producer: Identifies the particular producer of this
       lift file.
   :ivar Optional[Header] header: Contains the header information for the
       database.
   :ivar Optional[List[Entry]] entry_items: Each of the entries in the
       lexicon.
   :ivar Optional[Path] path: File path to a LIFT file to import.

   .. py:method:: find(text: str, field: str = 'gloss') -> Union[Entry, Sense, None]

      Return the first matching ``Entry`` or ``Sense`` item.
      The field searched can be "lexical-unit", "variant", "gloss", or
      "definition", as well as any fields defined in the LIFT file's header.


   .. py:method:: find_all(text: str, field: str = 'gloss') -> List[Union[Entry, Sense]]

      Return all matching ``Entry`` or ``Sense`` items.
      The field searched can be "lexical-unit", "variant", "gloss",
      "definition", or "grammatical-info", as well as any fields defined in
      the LIFT file's header.


   .. py:method:: get_item_by_id(refid: str) -> Union[Entry, Sense, None]

      Return an entry or sense by its ``RefId``.


   .. py:method:: show()

      Print an overview of the ``Lexicon`` in the terminal window.


   .. py:method:: to_lift(file_path: str)

      Save the ``Lexicon`` as a LIFT file.
      The LIFT-RANGES file will be automatically created in the same folder
      as the LIFT file.



.. py:class:: Sense(xml_tree: Optional[lxml.etree._Element] = None)


   Bases: :py:obj:`lift_utils.base.Extensible`

   An ``entry`` is made up of a number of ``sense`` elements.

   :ivar Optional[RefId] id: This gives an identifier for this ``Sense`` so
       that things can refer to it.
   :ivar Optional[int] order: A number that is used to give the relative
       order of senses within an entry.
   :ivar Optional[GrammaticalInfo] grammatical_info: Grammatical information.
   :ivar Optional[List[Union[Gloss, Form]]] gloss_items: Each ``gloss`` is a
       single string in a single language and writing system. ``Form`` is used
       by LIFT v0.13 (FieldWorks), while ``Gloss`` is used in later versions.
   :ivar Optional[Multitext] definition: Gives the definition in multiple
       languages or writing systems.
   :ivar Optional[List[Relation]] relation_items: While a lexical relation
       isn't strictly owned by a sense it is a good place to hold it.
   :ivar Optional[List[Note]] note_items: There are lots of different types of
       notes.
   :ivar Optional[List[Example]] example_items: Examples may be used for
       different target audiences.
   :ivar Optional[List[Reversal]] reversal_items: There may be different
       reversal indexes.
   :ivar Optional[List[URLRef]] illustration_items: The picture doesn't have
       to be static.
   :ivar Optional[List[Sense]] subsense_items: Senses can form a hierarchy.

   .. py:method:: get_gloss(lang='en') -> str

      Get gloss details for a given language.
      Defaults to English.


   .. py:method:: get_grammatical_info() -> GrammaticalInfo

      Get basic grammatical info.
              


   .. py:method:: get_id() -> lift_utils.datatypes.RefId

      Return the object's unique identifier


   .. py:method:: show()

      Print an overview of the ``sense`` in the terminal window.



