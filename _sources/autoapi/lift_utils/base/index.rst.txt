:py:mod:`lift_utils.base`
=========================

.. py:module:: lift_utils.base

.. autoapi-nested-parse::

   Manipulate base linguistic elements.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   lift_utils.base.Annotation
   lift_utils.base.Extensible
   lift_utils.base.Field
   lift_utils.base.Flag
   lift_utils.base.Form
   lift_utils.base.Gloss
   lift_utils.base.LIFTUtilsBase
   lift_utils.base.Multitext
   lift_utils.base.Span
   lift_utils.base.Text
   lift_utils.base.Trait
   lift_utils.base.URLRef




.. py:class:: Annotation(xml_tree: Optional[lxml.etree.ElementTree] = None)


   Bases: :py:obj:`Multitext`

   Provides a mechanism for adding meta-information to almost any element.
       


.. py:class:: Extensible(xml_tree: Optional[lxml.etree.ElementTree] = None)


   Bases: :py:obj:`LIFTUtilsBase`

   Used to provide certain extra information in a controlled way.

   :ivar Optional[DateTime] date_created: Contains a date/timestamp saying
       when the element was added to the dictionary.
   :ivar Optional[DateTime] date_modified: Contains a date/timestamp saying
       when the element was last changed.
   :ivar Optional[List[Field]] fields: Holds extra textual information.
   :ivar Optional[List[Trait]] traits: Adds type or constraint information.
   :ivar Optional[List[Annotation]] annotation: Adds meta-information
       describing the element.


.. py:class:: Field(xml_tree: Optional[lxml.etree.ElementTree] = None)


   Bases: :py:obj:`Multitext`

   A generalised element to allow an application to store information.
   It's for information in a LIFT file that isn't explicitly described in the
   LIFT standard.


.. py:class:: Flag(xml_tree: Optional[lxml.etree.ElementTree] = None)


   Bases: :py:obj:`Trait`

   An important mechanism for giving type information to an object.
   It can also be use for adding binary constraints.

   .. note:: Used by LIFT v0.13 (FieldWorks). Mentioned in specification but
       not defined; assumed to be equivalent to ``Trait``.


.. py:class:: Form(xml_tree: Optional[lxml.etree.ElementTree] = None)


   Bases: :py:obj:`LIFTUtilsBase`

   A representation of a string in a particular language and script.
   This is specified by the ``lang`` attribute.


.. py:class:: Gloss(xml_tree: Optional[lxml.etree.ElementTree] = None)


   Bases: :py:obj:`Form`

   A representation of a sense's gloss.
   It's given in a particular language and script as specified by the ``lang``
   attribute.


.. py:class:: LIFTUtilsBase(xml_tree: lxml.etree = None)


   This is a base class for all LIFT-related objects in this package.

   :ivar etree xml_tree: The object's current data.

   .. py:method:: print(format='xml')

      Print the object's data to stdout; as XML by default.


   .. py:method:: to_xml()

      Convert the object's data to XML.



.. py:class:: Multitext(xml_tree: Optional[lxml.etree.ElementTree] = None)


   Bases: :py:obj:`Text`

   Allows for different representations of the same information.
   It can be in a given language, or in multiple languages.


.. py:class:: Span(xml_tree: Optional[lxml.etree.ElementTree] = None)


   Bases: :py:obj:`LIFTUtilsBase`

   A Unicode string marked with language and formatting information.
       


.. py:class:: Text(text=None, xml_tree: Optional[lxml.etree.ElementTree] = None)


   Bases: :py:obj:`Form`

   Contains textual data mixed with ``span`` elements only.

   .. note:: It only inherits from ``Form`` in LIFT v0.13 (FieldWorks).


.. py:class:: Trait(xml_tree: Optional[lxml.etree.ElementTree] = None)


   Bases: :py:obj:`LIFTUtilsBase`

   An important mechanism for giving type information to an object.
   It can also be used for adding binary constraints.


.. py:class:: URLRef(xml_tree: Optional[lxml.etree.ElementTree] = None)


   Bases: :py:obj:`LIFTUtilsBase`

   This is a URL with a caption.
       


